{"slots":{"0":{"name":"CORE","type":{"events":[],"methods":[]}},"1":{"name":"SCREEN_A","type":{"events":[],"methods":[]}},"2":{"name":"slot2","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"system.print(\"KICKSTART\")\nrefresh_in_sec = 5 --export\nunit.setTimer(\"refresh\", refresh_in_sec)\nunit.stopTimer(\"kickstart\")\nreload()","filter":{"args":[{"value":"kickstart"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"0"},{"code":"--system.print(\"RELOAD\")\nreload()","filter":{"args":[{"value":"refresh"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"-- FACTORY HUD v1.4 by carmo\n\n-- Any questions please contact carmo#1590 on discord\n-- THIS CODE NEEDS TO BE PLACED ON A MAIN BOARD TO READ DB AND DISPLAY SCREEN\n\n-- SYSTEM VARS\n\nlocal varoff = 0\nlocal ContainerLCapacity = 153600 --export\nlocal ContainerMCapacity = 64000 --export\nlocal ContainerSCapacity = 9600 --export\nlocal ContainerXSCapacity = 1200 --export\nlocal Percentage_RED = 10 --export\nlocal Percentage_GREEN = 60 --export\nlocal UseContainerHubs = true --export\nlocal UseDoors = false --export\n\n-- DO NOT CHANGE THIS MATERIAL VARIABLES\n\nlocal m0 = \"EMPTY\"\nlocal m1 = \"HEMATITE\" -- T1\nlocal m2 = \"IRON\"\nlocal m3 = \"BAUXITE\" -- T1\nlocal m4 = \"ALUMINIUM\"\nlocal m5 = \"COAL\" -- T1\nlocal m6 = \"CARBON\"\nlocal m7 = \"QUARTZ\" -- T1\nlocal m8 = \"SILICON\"\nlocal m9 = \"LIMESTONE\" -- T2\nlocal m10 = \"CALCIUM\"\nlocal m11 = \"ACANTHITE\" -- T3\nlocal m12 = \"SILVER\"\nlocal m13 = \"MALACHITE\" -- T2\nlocal m14 = \"COPPER\"\nlocal m15 = \"NATRON\"  -- T2\nlocal m16 = \"SODIUM\"\nlocal m17 = \"PYRITE\" -- T3\nlocal m18 = \"SULFUR\"\nlocal m19 = \"PETALITE\" -- T3\nlocal m20 = \"LITHIUM\"\nlocal m21 = \"CHROMITE\" -- T2\nlocal m22 = \"CHROMIUM\"\nlocal m23 = \"GARNIERITE\" -- T3\nlocal m24 = \"NICKEL\"\nlocal m25 = \"GOLDNUGGETS\" -- T4\nlocal m26 = \"GOLD\"\nlocal m27 = \"RHODONITE\" -- T5\nlocal m28 = \"MANGANESE\"\nlocal m29 = \"CRYOLITE\"  -- T4\nlocal m30 = \"FLUORINE\"\nlocal m31 = \"COBALTITE\" -- T4\nlocal m32 = \"COBALT\"\nlocal m33 = \"KOLBECKITE\" -- T4\nlocal m34 = \"SCANDIUM\"\nlocal m35 = \"COLUMBITE\" -- T5\nlocal m36 = \"NIOBIUM\"\nlocal m37 = \"VANADINITE\" -- T5\nlocal m38 = \"VANADIUM\"\nlocal m39 = \"ILMENITE\" -- T5\nlocal m40 = \"TITANIUM\"\nlocal m41 = \"OXYGEN\" \nlocal m42 = \"HYDROGEN\"\nlocal m43 = \"WARPCELL\"\n\n--On this next arrays you will place witch order you like\n--Read always left to right, then next line.\n--YOU CAN SET m0 if you need a blank space\n\nlocal SCREENA = {m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m13,m14,m15,m16,m21,m22,m11,m12,m17,m18}\nlocal SCREENB = {m19,m20,m23,m24,m25,m26,m29,m30,m31,m32,m33,m34,m27,m28,m35,m36,m37,m38,m39,m40}\n\n--readout HTML\nlocal html_css\nif UseContainerHubs then \n    html_css = [[\n    <style> \n    .table {background-color:none; height:99vh; margin:auto; padding:0; position:relative; width:98vw} \n    .column_1_2 {background-color:none; position:absolute; left:20px; height:100%; width:45vw} \n    .column_2_2 {background-color:none; position:absolute; right:0; height:100%; width:45vw} \n    .row {background-color:none; height:9.8vh; border:0px grey solid; padding-left:35%; width:99%} \n    .name {background-color:none; padding-left:0px; line-height:5vh; font-size: 4vh; display:inline-block; width:70%} \n    .progressbar {background-color:green; position:relative; float:right; bottom:2px; min-height:1vh; height:1vh; right:0; min-width:1vw}\n    .daysavailable {width:100%; background-color:none; position:relative; float:left; text-align:right; bottom:2px; height:2vh;font-size:12px}\n    .percentage {background-color:none; font-size: 5vh; line-height: 5vh; width:30%; top: 0; right: 0; text-align:right; display:inline-block} \n    </style>\n    ]] else html_css = [[ \n    <style> \n    .table {background-color:none; height:99vh; margin:auto; padding:0; position:relative; width:50vw; display:inline-block} \n    .column_1_2 {background-color:none; position:absolute; height:100%; width:25vw} \n    .column_2_2 {background-color:none; position:absolute; right:0; height:100%; width:25vw}\n    .row {background-color:none; height:9.8vh; border:0px grey solid; width:99%; padding: 0 8px} \n    .name {background-color:none; padding-left:0px; line-height:5vh; font-size: 3vh; display:inline-block; width:64%} \n    .progressbar {background-color:green; position:relative; float:right; bottom:2px; min-height:1vh; height:1vh; right:0; min-width:1vw}\n    .daysavailable {width:100%; background-color:none; position:relative; float:left; text-align:right; bottom:2px; height:2vh;font-size:12px}\n    .percentage {background-color:none; font-size: 4vh; line-height: 5vh; width:34%; top: 0; right: 0px; text-align:right; display:inline-block; padding:0} \n    </style>\n    ]] end\n    \nlocal material_readout_top =  [[<div class=\"table\"><div class=\"column_1_2\">]]\n\nfunction material_readout_cell(name)\n    if name == nil then \n          html = [[\n<div class=\"row\"> \n\t<div class=\"name\"></div><div class=\"percentage\"></div>\n\t<div class=\"progressbar\" style=\"width:0%; background-color:pink\">&nbsp;</div>\n</div> ]] \n    else\n\tpercentage = getMaterialQuantity(name)\n        if name == \"loading\" then\n        html = [[\n<div class=\"row\"> \n\t<div class=\"name\">LOADING</div><div class=\"percentage\">LOADING</div>\n\t<div class=\"progressbar\" style=\"width:0%;\">&nbsp;</div>\n</div> ]]   \n    else\n     html = [[\n<div class=\"row\"> \n\t<div class=\"name\">]]..name..[[</div><div class=\"percentage\">]]..percentage..[[%</div>\n\t<div class=\"progressbar\" style=\"width:]]..percentage..[[%; background-color:]]..progresscolor(percentage)..[[\">&nbsp;</div>\n</div> ]]\n    end\n  end\n    return html\nend\n\nlocal material_readout_middle = [[</div><div class=\"column_2_2\">]]\nlocal material_readout_bottom = [[</div></div>]]\n\nfunction round(x)\n  return x>=0 and math.floor(x+0.5) or math.ceil(x-0.5)\nend\n\nfunction print_r(arr, indentLevel)\n    local str = \"\"\n    local indentStr = \"#\"\n\n    if(indentLevel == nil) then\n        system.print(print_r(arr, 0))\n        return\n    end\n\n    for i = 0, indentLevel do\n        indentStr = indentStr..\"\\t\"\n    end\n\n    for index,value in pairs(arr) do\n        if type(value) == \"table\" then\n            str = str..indentStr..index..\": \\n\"..print_r(value, (indentLevel + 1))\n        else \n            str = str..indentStr..index..\": \"..value..\"\\n\"\n        end\n    end\n    return str\nend\n\ncore = nil\nfor slot_name, slot in pairs(unit) do\n    if\n        type(slot) == \"table\"\n        and type(slot.export) == \"table\"\n        and slot.getElementClass\n    then\n        if slot.getElementClass():lower():find(\"coreunit\") then\n            core = slot\n        end\n    end\nend\n\ncontainersIdList = {}\nif core ~= nil then\n     local elementsIdList = core.getElementIdList()\n     for _,id in pairs(elementsIdList) do\n        local elementType = core.getElementTypeById(id):lower()\n        if elementType:find(\"container hub\") then\n\t\t  name = core.getElementNameById(id)\n            if string.match(name, \"CH_\") then   \n               --1: id, 2: containercount, 3: containersize, 4: material\n               --system.print(\"1: \"..id..\", 2: \"..name:sub(4,4)..\", 3: \"..name:sub(5,5)..\", 4: \"..name:sub(7))\n \t\t  \ttable.insert(containersIdList , {id, name:sub(4,4), name:sub(5,5), name:sub(7)})             \n\t\tend                        \n        end\n     end\nend\n\nfunction createMaterialArray(material)\n    arrayX = {}\n    for i,j in pairs(containersIdList) do\n        if j[4] == material then table.insert(arrayX, {j[1], j[2], j[3], j[4]}) end\n    end\n    return arrayX\nend\n\nfunction getContainerMass(size)\n   mass = 0\n    if size == \"L\" then mass = ContainerLCapacity\n    elseif size == \"M\" then mass = ContainerMCapacity\n    elseif size == \"S\" then mass = ContainerSCapacity\n    elseif size == \"XS\" then mass = ContainerXSCapacity\n    else\n       mass = 0\n    end\n    return mass \nend\n\nfunction getQuantity(material, mass)\n   quantity = nil\n   if material == \"IRON\" then quantity = round(mass / 7.85)\n   elseif material == \"ALUMINIUM\" then quantity = round(mass / 2.7)\n   elseif material == \"SILICON\" then quantity = round(mass / 2.33)\n   elseif material == \"SULFUR\" then quantity = round(mass / 1.82)\n   elseif material == \"SODIUM\" then quantity = round(mass / 0.97)\n   elseif material == \"LITHIUM\" then quantity = round(mass / 0.53)\n   elseif material == \"SILVER\" then quantity = round(mass / 10.49)\n   elseif material == \"CALCIUM\" then quantity = round(mass / 1.55)\n   elseif material == \"COPPER\" then quantity = round(mass / 8.96)\n   elseif material == \"CARBON\" then quantity = round(mass / 2.27)\n   elseif material == \"QUARTZ\" then quantity = round(mass / 2.65)\n   elseif material == \"BAUXITE\" then quantity = round(mass / 1.28)\n   elseif material == \"COAL\" then quantity = round(mass / 1.35)\n   elseif material == \"HEMATITE\" then quantity = round(mass / 5.04)\n   elseif material == \"MALACHITE\" then quantity = round(mass / 4)\n   elseif material == \"LIMESTONE\" then quantity = round(mass / 2.711)\n   elseif material == \"NATRON\" then quantity = round(mass / 1.55)\n   elseif material == \"ACANTHITE\" then quantity = round(mass / 7.2)\n   elseif material == \"PETALITE\" then quantity = round(mass / 2.41)\n   elseif material == \"CHROMITE\" then quantity = round(mass / 4.54)\n   elseif material == \"CHROMIUM\" then quantity = round(mass / 7.19)\n   elseif material == \"GARNIERITE\" then quantity = round(mass / 2.6)\n   elseif material == \"NICKEL\" then quantity = round(mass / 8.91)\n   elseif material == \"PYRITE\" then quantity = round(mass / 5.01)     \n   elseif material == \"GOLD\" then quantity = round(mass / 19.3)\n   elseif material == \"GOLDNUGGETS\" then quantity = round(mass / 19.3)\n   elseif material == \"RHODONITE\" then quantity = round(mass / 3.76)\n   elseif material == \"MANGANESE\" then quantity = round(mass / 7.21)\n   elseif material == \"CRYOLITE\" then quantity = round(mass / 2.95)\n   elseif material == \"FLUORINE\" then quantity = round(mass / 1.7)\n   elseif material == \"COBALTITE\" then quantity = round(mass / 6.33)\n   elseif material == \"COBALT\" then quantity = round(mass / 8.9)\n   elseif material == \"KOLBECKITE\" then quantity = round(mass / 2.37)\n   elseif material == \"SCANDIUM\" then quantity = round(mass / 2.98)        \n   elseif material == \"COLUMBITE\" then quantity = round(mass / 5.38)\n   elseif material == \"NIOBIUM\" then quantity = round(mass / 8.57)\n   elseif material == \"VANADINITE\" then quantity = round(mass / 6.95)\n   elseif material == \"VANADIUM\" then quantity = round(mass / 6)\n   elseif material == \"ILMENITE\" then quantity = round(mass / 4.55)\n   elseif material == \"TITANIUM\" then quantity = round(mass / 4.51)\n   elseif material == \"OXYGEN\" then quantity = round(mass / 1)\n   elseif material == \"HYDROGEN\" then quantity = round(mass / 0.07)\n   elseif material == \"WARPCELL\" then quantity = round(mass / 100)\n   else \n     quantity = 666\n   end    \n   return quantity\nend\n\nfunction getMass(arrayx)\n    mass = 0\n    percentage = 0\n    for i,j in pairs(arrayx) do\n     hubmass = core.getElementMassById(j[1])\n     containermass = round(getContainerMass(j[3])*j[2])\n     mass = (containermass - math.floor(hubmass))\n     quantity = getQuantity(j[4], hubmass)\n     percentage = containerPercentage(quantity, containermass)   \n    end\n    return percentage\nend\n\nfunction containerPercentage(materialqtd, containercapacity)\n    if materialqtd ~= nil then\n\t\treturn round((materialqtd*100)/containercapacity)\n    else\n    \treturn 666\n    end\nend\n\nfunction getMaterialQuantity(material)\n    arrayX = createMaterialArray(material)\n    return getMass(arrayX)\nend\n\nfunction progresscolor(percentage)\n    color = \"\"\n    if (percentage<=Percentage_RED) then\n        color = \"red\"\n    elseif (percentage >Percentage_RED) and (percentage <Percentage_GREEN) then\n        color = \"yellow\"\n    else\n        color = \"green\"\n    end\n    return color\nend\n\nfunction create_material_readout_screen_A() \n   html = html_css \n   html = html .. material_readout_top\n   html = html .. material_readout_cell(SCREENA[1])\n   html = html .. material_readout_cell(SCREENA[3])\n   html = html .. material_readout_cell(SCREENA[5])\n   html = html .. material_readout_cell(SCREENA[7])\n   html = html .. material_readout_cell(SCREENA[9])\n   html = html .. material_readout_cell(SCREENA[11])\n   html = html .. material_readout_cell(SCREENA[13])\n   html = html .. material_readout_cell(SCREENA[15])\n   html = html .. material_readout_cell(SCREENA[17])\n   html = html .. material_readout_cell(SCREENA[19])\n   html = html .. material_readout_middle\n   html = html .. material_readout_cell(SCREENA[2])\n   html = html .. material_readout_cell(SCREENA[4])\n   html = html .. material_readout_cell(SCREENA[6])\n   html = html .. material_readout_cell(SCREENA[8])\n   html = html .. material_readout_cell(SCREENA[10])\n   html = html .. material_readout_cell(SCREENA[12])\n   html = html .. material_readout_cell(SCREENA[14])\n   html = html .. material_readout_cell(SCREENA[16])\n   html = html .. material_readout_cell(SCREENA[18])\n   html = html .. material_readout_cell(SCREENA[20])\n   html = html .. material_readout_bottom\n   if not UseContainerHubs then\n   html = html .. material_readout_top\n   html = html .. material_readout_cell(SCREENB[1])\n   html = html .. material_readout_cell(SCREENB[3])\n   html = html .. material_readout_cell(SCREENB[5])\n   html = html .. material_readout_cell(SCREENB[7])\n   html = html .. material_readout_cell(SCREENB[9])\n   html = html .. material_readout_cell(SCREENB[11])\n   html = html .. material_readout_cell(SCREENB[13])\n   html = html .. material_readout_cell(SCREENB[15])\n   html = html .. material_readout_cell(SCREENB[17])\n   html = html .. material_readout_cell(SCREENB[19])\n   html = html .. material_readout_middle\n   html = html .. material_readout_cell(SCREENB[2])\n   html = html .. material_readout_cell(SCREENB[4])\n   html = html .. material_readout_cell(SCREENB[6])\n   html = html .. material_readout_cell(SCREENB[8])\n   html = html .. material_readout_cell(SCREENB[10])\n   html = html .. material_readout_cell(SCREENB[12])\n   html = html .. material_readout_cell(SCREENB[14])\n   html = html .. material_readout_cell(SCREENB[16])\n   html = html .. material_readout_cell(SCREENB[18])\n   html = html .. material_readout_cell(SCREENB[20])\n   html = html .. material_readout_bottom  \n   end\n    \n   return html \nend\n\nfunction create_material_readout_screen_B()   \n   html = html_css \n   html = html .. material_readout_top\n   html = html .. material_readout_cell(SCREENB[1])\n   html = html .. material_readout_cell(SCREENB[3])\n   html = html .. material_readout_cell(SCREENB[5])\n   html = html .. material_readout_cell(SCREENB[7])\n   html = html .. material_readout_cell(SCREENB[9])\n   html = html .. material_readout_cell(SCREENB[11])\n   html = html .. material_readout_cell(SCREENB[13])\n   html = html .. material_readout_cell(SCREENB[15])\n   html = html .. material_readout_cell(SCREENB[17])\n   html = html .. material_readout_cell(SCREENB[19])\n   html = html .. material_readout_middle\n   html = html .. material_readout_cell(SCREENB[2])\n   html = html .. material_readout_cell(SCREENB[4])\n   html = html .. material_readout_cell(SCREENB[6])\n   html = html .. material_readout_cell(SCREENB[8])\n   html = html .. material_readout_cell(SCREENB[10])\n   html = html .. material_readout_cell(SCREENB[12])\n   html = html .. material_readout_cell(SCREENB[14])\n   html = html .. material_readout_cell(SCREENB[16])\n   html = html .. material_readout_cell(SCREENB[18])\n   html = html .. material_readout_cell(SCREENB[20])\n   html = html .. material_readout_bottom     \n   return html \nend\n\nfunction create_material_readout_loading()   \n   html = html_css \n   html = html .. material_readout_top\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_middle\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_bottom\n   if not UseContainerHubs then\n   html = html .. material_readout_top\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_middle\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_cell(\"LOADING\")\n   html = html .. material_readout_bottom  \n   end\n   return html \nend\n\n\nfunction clearSCREEN()\n   -- clear screens\n  SCREEN_A.clear()\n  if SCREEN_B ~= nil then SCREEN_B.clear() end\nend\n\nfunction reload()\n  clearSCREEN()\n  \n  -- screen A\n  html = [[ <div style=\"width:100vw\">]]\n  html = html .. [[ <div style=\"margin-top: 10px;padding: 0px;width: 100vw;display: inline-block;\"> ]]\n  html = html .. create_material_readout_screen_A()\n  html = html .. [[</div></div>]] \n \n  SCREEN_A.setHTML(html)\n  \n  -- screen B\n  html = [[<div style=\"width:100vw\">]]\n  html = html .. [[<div style=\"margin-top:10px;padding:0px;width:100vw;display:inline-block;\">]]\n  html = html .. create_material_readout_screen_B()\n  html = html .. [[</div></div>]]\n  \n  if SCREEN_B ~= nil then SCREEN_B.setHTML(html) end\n    \nend\n\nfunction warmup()\n  system.print(\"WARMUP\")\n  \n  -- screen A\n  html = [[<div style=\"width:100vw\">]]\n  html = html .. [[<div style=\"margin-top: 10px;padding: 0px;width: 100vw;display: inline-block;\">]]\n  html = html .. create_material_readout_loading()\n  html = html .. [[</div></div>]] \n \n  SCREEN_A.setHTML(html)\n  \n  -- screen B\n  html = [[<div style=\"width:100vw\">]]\n  html = html .. [[<div style=\"margin-top: 10px;padding: 0px;width: 100vw;display: inline-block;\">]]\n  html = html .. create_material_readout_loading()\n  html = html .. [[</div></div>]]\n  \n  if SCREEN_B ~= nil then SCREEN_B.setHTML(html) end\nend\n\nfunction door()\n    local playerId = unit.getMasterPlayerId() \n    local playerName = system.getPlayerName(playerId) \n    local t = {'carmopereira'}  -- username array like {'user1', 'user2', 'CaseSensitive'}\n    local function has_value (tab, val) \n        for index, value in ipairs(tab) do \n            if value == val then \n                return true \n            end \n        end \n        return false \n    end \n    --system.print(\"Hello \" .. playerName .. \" : \" .. playerId .. \"!\") \n    if has_value(t, playerName) then \n        if DOOR1 ~= nil then DOOR1.activate() end\n        if DOOR2 ~= nil then DOOR2.activate() end\n        --someSCREEN.setCenteredText(\"WELCOME\" .. playerName) \n    else \n        system.print('PERMISSION DENIED') \n    end\nend\n\n\n-- STARTUP FACTORY\nwarmup()\nunit.setTimer(\"kickstart\", 1)\nif UseDoors then door() end","filter":{"args":[],"signature":"start()","slotKey":"-2"},"key":"2"},{"code":"SCREEN_A.clear()\nif SCREEN_B ~= nil then SCREEN_B.clear() end\n\nif DOOR1 ~= nil then\nif DOOR1.getState() == 1 then  \n    if DOOR1 ~= nil then DOOR1.deactivate() end\n    if DOOR2 ~= nil then DOOR2.deactivate() end\n    SCREEN_A.clear() \n    if SCREEN_B ~= nil then SCREEN_B_celar() end\nend\nend","filter":{"args":[],"signature":"stop()","slotKey":"-2"},"key":"3"}],"methods":[],"events":[]}